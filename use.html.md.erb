---
breadcrumb: RabbitMQ for Pivotal Cloud Foundry Documentation
title: Using On-Demand RabbitMQ for PCF
owner: London Services
---

This topic provides instructions for developers on how to use the on-demand RabbitMQ service for their Pivotal Cloud Foundry (PCF) apps. RabbitMQ enables messaging between cloud-based servers, apps and devices.

These procedures use the Cloud Foundry Command-Line Interface (cf CLI). You can also use [Apps Manager](http://docs.pivotal.io/pivotalcf/console/dev-console.html) to perform the same tasks using a graphical UI.

For general information, see [Managing Service Instances with the cf CLI](http://docs.pivotal.io/devguide/services/managing-services.html).

## <a id="prereqs"></a>Prerequisites

To use on-demand RabbitMQ for PCF with your PCF apps, you need:

* A PCF installation with [RabbitMQ for PCF](https://network.pivotal.io/products/pivotal-rabbitmq-service) installed and listed in the [Marketplace](http://docs.pivotal.io/devguide/services/#instances)
* A [Space Developer](http://docs.pivotal.io/pivotalcf/concepts/roles.html#roles) or Admin account on the PCF installation
* A local machine with the following installed:
   - a browser
   - a shell
   - the [Cloud Foundry Command-Line Interface](http://docs.pivotal.io/pivotalcf/cf-cli/install-go-cli.html) (cf CLI)
   - the Linux [watch](http://www.linfo.org/watch.html) command

## <a id='developer_guide'></a>Developer Guide

### Entries in the VCAP_SERVICES Environment Variable

Apps running in Cloud Foundry gain access to the bound service instances through an environment variable credentials hash called `VCAP_SERVICES`. An example hash is shown below:

<pre>
{
    "p-rabbitmq": [{
        "credentials": {
            "dashboard_url": "http://pivotal-rabbitmq.your.pcf.example.com/#/login/b5d0ad14-4352-48e8-8982-d5b1d257029f/tavk86pnnns1ddiqpsdtbchurn",
            "username": "b5d0ad14-4352-48e8-8982-d5b1d257029f",
            "password": "tavk86pnnns1ddiqpsdtbchurn",
            "protocols": {
                "amqp": {
                    "password": "tavk86pnnns1ddiqpsdtbchurn",
                    "username": "b5d0ad14-4352-48e8-8982-d5b1d257029f",
                    "uri": "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:tavk86pnnns1ddiqpsdtbchurn<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
                    "uris": [
                        "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:tavk86pnnns1ddiqpsdtbchurn<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
                    ]
                }
            }
        }
    }]
}
</pre>


For more information about the environment variable `VCAP_SERVICES`, see [RabbitMQ Environment Variables](./reference.html).

## <a id="process"></a> Check If Your App and the Service Instance Share a Space

Because every app and service in PCF is scoped to a [space](http://docs.pivotal.io/pivotalcf/concepts/roles.html#spaces), an app can only use a service if an instance of the service exists in the same space.

1. Use the [cf CLI](http://docs.pivotal.io/pivotalcf/cf-cli/getting-started.html#login) or [Apps Manager](http://docs.pivotal.io/pivotalcf/customizing/console-login.html) to log into the org and space that contains the app.

1. Check if an instance of the RabbitMQ for PCF service exists in the same space as the app. If the space already has a RabbitMQ for PCF instance, skip to the [Confirm Service Availability](#marketplace) section below. If the space does not already have a RabbitMQ for PCF instance, follow the steps in the [Create a Service Instance](#create) section below.

## <a id='create'></a>Create a Service Instance

Unlike pre-provisioned services, on-demand services are created asynchronously, not immediately.
The `watch` command shows you when your service instance is ready to bind and use.

To create an instance of the on-demand RabbitMQ for PCF service, follow the steps below.

1. Run `cf create-service ondemand-rabbitmq Solo SERVICE-INSTANCE`<br><br>

    Where `SERVICE-INSTANCE` is a name you choose to identify the service instance. This name appears under `service` in the output from `cf services`.

2. Run `watch cf services` and wait for the `last operation` for your instance to show as `create succeeded`.

   <pre class="terminal">
  $ cf create-service ondemand-rabbitmq Solo my-instance<br>
   Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
   OK<br>
  $ watch cf services<br>
   Getting services in org my-org / space my-space as user<span>@</span>example.com...
   OK
   name          service            plan    bound apps    last operation
   my-instance   ondemand-rabbitmq  Solo                  create succeeded
</pre>

   If you encounter an error, see [Troubleshooting Instances](./troubleshoot-instances.html) for more information.

## <a id='marketplace'></a>Confirm Service Availability

For an app to use a service

* the service must be available in the Marketplace for its space
* an instance of the service must exist in its space

Confirm both of these by following the steps below.

1. Run `cf marketplace`
1. Check that `ondemand-rabbitmq` is in the `service` column. If it is, on-demand RabbitMQ for PCF is available. If it is not, ask your operator to install it.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service             plans      description
    [...]
    ondemand-rabbitmq   Solo       RabbitMQ Service
    [...]
    </pre>

1. Run `cf services`
1. Check that `ondemand-rabbitmq` is in the `service` column next to your instance. If it is not, follow the steps in the [Create a Service Instance](#create) section above.

    <pre class="terminal">
    $ cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...
    OK
    name          service            plan    bound apps    last operation
    my-instance   ondemand-rabbitmq  Solo                  create succeeded
    </pre>

## <a id="using-tls"></a> Use Transport Layer Security (TLS)

Use TLS to secure communication between your app and a RabbitMQ service instance by following these procedures:

1. [Configure TLS for Your Service Instance](#tls)
1. If your app is written in Java or Spring, follow the steps in the [Activate TLS for Java and Spring Apps](#tls-java-spring) section below. If it is not, follow the steps in [Modify Apps for TLS](./modify-apps-tls.html).


### <a id='tls'></a>Configure TLS for Your Service Instance

To secure the communication between your app and a RabbitMQ service instance, you must enable TLS on the
service instance. You cannot disable TLS after it is enabled.

The operator must enable TLS in the **Security for On-Demand Plans** tab before you can use this feature.
For more information, see [Configure Security](./install-config.html#security).

<p class="note"><strong>Note:</strong> If you enable TLS for a service instance, you can no longer connect to it without using TLS.</p>

1. If you have already created a RabbitMQ service instance, update the service instance to use TLS by running

    ```
    cf update-service MY_INSTANCE -c '{"tls": true}'
    ```

    Where `MY-INSTANCE` is the name you chose when you created your service instance.

1. If you have not yet created a RabbitMQ service instance, create one with TLS enabled by running

    ```
    cf create-service p.rabbitmq PLAN MY_INSTANCE -c '{"tls": true}'
    ```

    Where:<br>
      * `PLAN` is the name of the deployment plan to use for this service instance
      * `MY-INSTANCE` is the name to give to the new service instance

1. Check that the process you ran was successful by running:

      ```
      cf service MY-INSTANCE
      ```

### <a id="tls-java-spring"></a> Activate TLS for Java and Spring Apps

<p class="note"><strong>Note:</strong> If your app is not written in Java or Spring, see <a href="./modify-apps-tls.html"> Modifying Apps for TLS</a>.</p>


For an app to use TLS, you must update it to request encrypted communications when connecting to a RabbitMQ service instance.
The procedure for updating your app depends on the app's language and framework. Java and Spring apps automatically detect TLS.

To activate TLS for Java and Spring apps, do one of the following:

* For apps that are not bound to an existing service instance, re-push the apps by running `cf push`.

* For apps bound to an existing service instance, follow these steps:
  1. Stop the app. For example:
    <pre class="terminal">$ cf stop my-app</pre>
  1. Unbind the app from the service instance. For example:
    <pre class="terminal">$ cf unbind-service my-app my-service-instance</pre>
  1. Re-bind the app to the service instance. For example:
    <pre class="terminal">$ cf bind-service my-app my-service-instance</pre>
  1. Restart the app. For example:
    <pre class="terminal">$ cf restart my-app</pre>

<p class="note"><strong>Note:</strong> If the operator used a self-signed certificate,
configure your app to use the same CA certificate and valid certificate and key.</p>

## <a id="bind"></a>Bind a Service Instance to Your App

For an app to use a service, you must bind it to a service instance. Do this after you push or re-push the app using `cf push`.

To bind an app to a RabbitMQ instance, run

`cf bind-service APP SERVICE-INSTANCE`

Where `APP` is the app you want to use the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service mydb to my-app in org my-org / space test as user<span>@</span>example.com...
OK
TIP: Use 'cf push' to ensure your env variable changes take effect
</pre>

## <a id="call"></a>Use the RabbitMQ Service in Your App

To access the RabbitMQ service from your app, follow the steps below.

1. Run `cf env APP-NAME` with the name of the app bound to the RabbitMQ for PCF instance.

1. In the output, note the connection strings listed in the `VCAP_SERVICES` > `credentials` object for the app.

1. In your app code, call the RabbitMQ service using the connection strings.

For how to code your app to use RabbitMQ messaging, see the [RabbitMQ documentation](https://rabbitmq.docs.pivotal.io/37/rabbit-web-docs/clients.html).

## <a id="restart"></a>Update a Service Instance

If you bind a new service or change the service bindings, you need to run `cf restart` to update the `VCAP_SERVICES` environment variable in the application container.

Run `cf restart-app APP`, where `APP` is the app you want to use the updated service instance.

See an example below.

<pre class="terminal">
$ cf restart my-app
</pre>

Pushing the new version of an app automatically re-stages and restarts the app on any service instances it is bound to.

## <a id="unbind"></a>Unbind a Service Instance From Your App

To stop an app from using a service it no longer needs, unbind it from the service instance by running

`cf unbind-service APP SERVICE-INSTANCE`

Where `APP` is the app you want to stop using the RabbitMQ service instance and `SERVICE-INSTANCE` is the name you supplied when you ran `cf create-service`.

See an example below.

<pre class="terminal">
$ cf unbind-service my-app my-instance<br>
Unbinding app my-app from service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK
</pre>

## <a id="delete"></a>Delete a Service Instance

To delete a service instance, use `cf delete-service`.

1. Run `cf delete-service SERVICE-INSTANCE`, where `SERVICE-INSTANCE` is the name of the service to delete. See an example below.

    <pre class="terminal">
   $ cf delete-service my-instance<br>
    Are you sure you want to delete the service my-instance ? y
    Deleting service my-service in org my-org / space my-space as user<span>@</span>example.com...
    OK
</pre>

1. Run `watch cf service SERVICE-INSTANCE` and wait for a `Service instance not found` error indicating that the instance no longer exists.

You cannot delete a service instance that an app is bound to.

## <a id="admin"></a> Create an Admin User for a Service Instance

If you want admin privileges for the RabbitMQ Management UI, you can create
an admin user for a service instance and obtain user credentials that you can
share with other app developers.

Both operators and app developers can use this procedure.
For instructions, see [Create an Admin User for a Service Instance](./install-config.html#admin-service-key).

## <a id="share-instances"></a> Sharing Service Instances
To share service instances, the feature-flag `service_instance_sharing` must be enabled by your operator. You can then follow the [Cloud Foundry documentation](https://docs.cloudfoundry.org/devguide/services/sharing-instances.html) to share your service instances across Cloud Foundry Organizations and Spaces.

<!-- Partials are in https://github.com/pivotal-cf/docs-services-partials -->

## <a id="log-cache"></a> Access RabbitMQ Metrics for On-Demand Service Instances

<%= partial '../../rabbitmq-cf/odb/log-cache-cli-plugin' %>

## <a id="plugins"></a> RabbitMQ Plugins

For a list of RabbitMQ plugins that are enabled or disabled by default in
RabbitMQ for PCF, see
[RabbitMQ Server Plugins](./install-config.html#server-plugins).

## <a id="federation"></a> Federate Exchanges and Queues

You can federate exchanges and queues in RabbitMQ for PCF, as you would in any RabbitMQ deployment.

To federate exchanges and queues, do the following:

1. Create a service key by following the instructions in [Create an Admin User for a Service Instance](./install-config.html#admin-service-key). The output of the above procedure returns admin user credentials, along with other data.

1. In the output from the above step, look for the `uris` array. It has the following pattern<br>
<pre class="terminal">
{
  ...
  "uri": "amqp://USERNAME:PASSWORD@DNS\_ENTRY/VHOST",
  "uris": [
    "amqp://USERNAME:PASSWORD@DNS\_ENTRY/VHOST"
  ],
  ...
}
</pre>
as seen in the below example.<br>
<pre class="terminal">
{
...
"uri": "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:passwordexample123456789<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
"uris": [
"amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:passwordexample123456789<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
...
}
</pre>


1. Set up federation as you normally would, using the RabbitMQ Management UI or API, with the URIs found in the `uris` array you got from the step above.<br><br>
    For instructions on federation, see the [RabbitMQ documentation](https://www.rabbitmq.com/federation.html).

## <a id="shovel"></a> Shovel Exchanges and Queues

You can shovel exchanges and queues in RabbitMQ for PCF, as you would in any RabbitMQ deployment.

To shovel exchanges and queues, do the following:

1. Create a service key by following the instructions in [Create an Admin User for a Service Instance](./install-config.html#admin-service-key). The output of the above procedure returns admin user credentials, along with other data.

1. In the output from the above step, look for the `uris` array. It has the following pattern<br>
<pre class="terminal">
{
  ...
  "uri": "amqp://USERNAME:PASSWORD@DNS\_ENTRY/VHOST",
  "uris": [
    "amqp://USERNAME:PASSWORD@DNS\_ENTRY/VHOST"
  ],
  ...
}
</pre>
as seen in the example below.<br>
<pre class="terminal">
{
...
"uri": "amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:passwordexample123456789<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
"uris": [
"amqp://b5d0ad14-4352-48e8-8982-d5b1d257029f:passwordexample123456789<span>@</span>q-s0.rabbitmq-server.services-subnet.service-instance-e0e7fc5f-c1c7-4211-81b9-284fb29ba851.bosh:5672/62e5ab21-7b38-44ac-b139-6aa97af01cd7",
...
}
</pre>

1. Set up shovel as you normally would, using the RabbitMQ Management UI or API,
with the URIs found in the `uris` array you got from the step above.<br><br>
For shovel instructions, see the [RabbitMQ documentation](https://www.rabbitmq.com/shovel.html).
At the moment, RabbitMQ for PCF only supports Dynamic Shovels.
