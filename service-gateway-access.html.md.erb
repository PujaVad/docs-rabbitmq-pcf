---
title: Enabling Service&#8209;Gateway Access
owner: RabbitMQ
---

This topic describes how to configure an on-demand plan with service-gateway
access for <%= vars.product_name %> service instances.
Service-gateway access enables a RabbitMQ service instance to connect to components
that are either on another <%= vars.platform_name %> foundation or not on a <%= vars.platform_name %> foundation.

## <a id='overview'></a> Overview

There are multiple use cases for service-gateway RabbitMQ access, for example:

- Accessing RabbitMQ from apps deployed to <%= vars.app_runtime_full %> in a different <%= vars.platform_name %> foundation
- Replicating messages between RabbitMQ clusters in different <%= vars.platform_name %> foundations,
for example, to set up federation for disaster recovery
- Enabling legacy apps to communicate with <%= vars.app_runtime %>-deployed apps through RabbitMQ
- Using <%= vars.product_name %> as a way to deploy and manage RabbitMQ for apps
that are not deployed to <%= vars.app_runtime %>

## <a id='architecture'></a> Architecture

Service-gateway access to RabbitMQ instances leverages the TCP router in <%= vars.app_runtime %>.
It also requires some ports to be open on your external load balancer.
These ports are reserved for RabbitMQ traffic coming from outside the <%= vars.platform_name %> foundation.
Every time a developer creates a service instance of a service-gateway plan, a port
in this range is allocated to redirect traffic to the service instance.

![architecture diagram shows app and load balancer external to the foundation and the TCP router
  and RMQ nodes internal to the foundation](/images/service-gateway-architecture.png)


## <a id='configuration'></a> Enable Service-Gateway Access

To enable service-gateway access:

1. Enable TCP Routing in <%= vars.app_runtime %> by doing steps 1, 2, and 4 of the procedure in
[Configuring TCP Routing in <%= vars.app_runtime %>](https://docs.pivotal.io/pivotalcf/opsguide/tcp-routing-ert-config.html).
Ensure that you review the pre-deployment steps required to enable this feature.

1. In **Global Settings for On-Demand Plans**, fill in the following fields:
    - **External TCP domain**: Corresponding with the DNS entry for the external load balancer.
    - **Port Range**: A range of ports for RabbitMQ service instances to use.
    You must have at least one port for each service instance.
    Ensure that the range has enough capacity to accommodate the maximum number of service instances.<br>
    This range must not overlap with the range entered in the <%= vars.app_runtime %> tile &gt; **Networking** &gt; **TCP Routing Ports**.

     ![An example Global settings for on-demand plans pane with the External TCP domain field
     filled in with tcp.elcajon.cf-app.com and the Port Range field filled in with
     1024-2025.](/images/global-settings-service-gateway.png)

1. Allow ingress traffic on your external load balancer for the specified port range.

1. Navigate to the service plan that you want to use and select the **Service-Gateway Access** checkbox.
Pivotal recommends that you change the name or the description of the plan to reflect the new feature.
![Service plan pane with the Service-Gateway Access checkbox selected.](/images/enable-service-gateway.png)
<p class="note"><strong>Note:</strong> If service-gateway access is disabled and then re-enabled, app developers must create
new service keys to obtain a new set of credentials for service-gateway access.</p>

<p class="note warning"><strong>Warning:</strong> Pivotal strongly recommends configuring
service-gateway access with TLS to prevent man-in-the-middle attacks.
For instructions on configuring this, see <a href="./install-config.html#security">Configure Security</a>.</p>

## <a id='workflow'></a> Developer Workflow

For instructions for app developers, see [Create a Service Instance with Service-Gateway Access](./use.html#service-gateway).
