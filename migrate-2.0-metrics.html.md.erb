---
title: Migrating from Version 1.x to 2.x of Metrics
owner: London Services
---

Version 2.0 of <%= vars.product_short %> shipped with a number of improvements to the suite of metrics available in
RabbitMQ Service Instances. This version unifies the suite of metrics provided by Service Instances with the suite
provided by open-source RabbitMQ, and vastly increases the amount of information available to you for observability, as
well as leaning on the more performance-optimised observability endpoint in RabbitMQ.

A necessary change as a result of this refactor is that the format of the metrics provided in 1.0 of <%= vars.product_short %>
has changed; any dashboards you used prior to upgrading may require changes in order to function with the new metric
suite. In many cases, there are simply one-to-one mappings of old metric names to new metric names, however some
specific metrics may require some additional manipulation to achieve the same result. Unless otherwise stated, all
metrics are available through both the Loggregator firehose system and directly from the Prometheus endpoint on the
RabbitMQ nodes themselves.

For the full list of RabbitMQ and Erlang metrics exposed by the product, consult the [upstream documentation](https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbitmq_prometheus/metrics.md).

<p class="note">
<strong>Note:</strong> The vast majority of these metrics are exposed by the <code>rabbitmq_prometheus</code> plugin,
and require you to have activated this plugin on your service instance. The plugin is always enabled for on-demand
instances, however you can disable it for pre-provisioned instances. VMware recommends that you do not disable this plugin.
</p>

## <a id="service-broker-prepro"></a> Service Broker Metrics (Pre-provisioned only)
All metrics for the pre-provisioned service broker have one-to-one equivalents in <%= vars.product_short %> v2.0,
and differ only in naming.

<table>
<thead>
  <tr>
    <th>Old metric</th>
    <th>New metric</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>/p-rabbitmq/service_broker/heartbeat</td>
    <td>_p_rabbitmq_service_broker_heartbeat</td>
  </tr>
</tbody>
</table>

## <a id="service-broker-on-demand"></a> Service Broker Metrics (On-demand only)
All metrics for the on-demand service broker have one-to-one equivalents in <%= vars.product_short %> v2.0,
and differ only in naming.

<table>
<thead>
  <tr>
    <th>Old metric</th>
    <th>New metric</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>/on-demand-broker/p-rabbitmq/quota_remaining</td>
    <td>_on_demand_broker_p_rabbitmq_quota_remaining</td>
  </tr>
  <tr>
    <td>/on-demand-broker/p-rabbitmq/total_instances</td>
    <td>_on_demand_broker_p_rabbitmq_total_instances</td>
  </tr>
  <tr>
    <td>/on-demand-broker/p-rabbitmq/&lt;PLAN_NAME&gt;/quota_remaining</td>
    <td>_on_demand_broker_p_rabbitmq_&lt;PLAN_NAME&gt;_quota_remaining</td>
  </tr>
  <tr>
    <td>/on-demand-broker/p-rabbitmq/&lt;PLAN_NAME&gt;/quota_remaining</td>
    <td>_on_demand_broker_p_rabbitmq_&lt;PLAN_NAME&gt;_total_instances</td>
  </tr>
</tbody>
</table>

## <a id="haproxy"></a> HAProxy Metrics (Pre-provisioned only)
All metrics for HAProxy have one-to-one equivalents in <%= vars.product_short %> v2.0,
and differ only in naming.

<table>
<thead>
  <tr>
    <th>Old metric</th>
    <th>New metric</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>/p-rabbitmq/haproxy/heartbeat</td>
    <td>_p_rabbitmq_haproxy_heartbeat</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/haproxy/backend/qsize/amqp</td>
    <td>_p_rabbitmq_haproxy_backend_qsize_amqp</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/haproxy/backend/retries/amqp</td>
    <td>_p_rabbitmq_haproxy_backend_retries_amqp</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/haproxy/backend/ctime/amqp</td>
    <td>_p_rabbitmq_haproxy_backend_ctime_amqp</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/haproxy/health/connections</td>
    <td>_p_rabbitmq_haproxy_health_connections</td>
  </tr>
</tbody>
</table>

## <a id="rabbitmq"></a> RabbitMQ Metrics
RabbitMQ metrics are now consumed directly from the Prometheus metrics endpoint of the RabbitMQ server, rather than
from the RabbitMQ Management API. In general, far more information is now exposed in <%= vars.product_short %> than
before; in the case where you wish to simply retrieve the same information as before

<table>
<thead>
  <tr>
    <th>Old metric</th>
    <th>New metric</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>/p-rabbitmq/erlang/heartbeat</td>
    <td>NO EQUIVALENT</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/erlang/erlang_processes</td>
    <td>erlang_vm_process_count</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/erlang/reachable_nodes</td>
    <td>count(erlang_vm_dist_node_state, where value==3)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/memory</td>
    <td>rabbitmq_process_resident_memory_bytes</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/mem_alarm</td>
    <td>rabbitmq_alarms_memory_used_watermark</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/disk_free_alarm</td>
    <td>rabbitmq_alarms_free_disk_space_watermark</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/disk_free</td>
    <td>rabbitmq_disk_space_available_bytes</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/disk_free_limit</td>
    <td>rabbitmq_disk_space_available_limit_bytes</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/system/file_descriptors</td>
    <td>rabbitmq_process_open_fds</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/connections/count</td>
    <td>rabbitmq_connections</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/consumers/count</td>
    <td>rabbitmq_global_consumers</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/published</td>
    <td>rabbitmq_global_messages_received_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/published_rate</td>
    <td>rate(rabbitmq_global_messages_received_total)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/delivered</td>
    <td>rabbitmq_global_messages_delivered_consume_manual_ack_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/delivered_rate</td>
    <td>rate(rabbitmq_global_messages_delivered_consume_manual_ack_total)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/delivered_noack</td>
    <td>rabbitmq_global_messages_delivered_consume_auto_ack_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/redelivered</td>
    <td>rabbitmq_global_messages_redelivered_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/redelivered_rate</td>
    <td>rate(rabbitmq_global_messages_redelivered_total)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/get_no_ack</td>
    <td>rabbitmq_global_messages_delivered_get_auto_ack_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/get_no_ack_rate</td>
    <td>rate(rabbitmq_global_messages_delivered_get_auto_ack_total)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/return_unroutable</td>
    <td>rabbitmq_global_messages_unroutable_returned_total</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/return_unroutable_rate</td>
    <td>rate(rabbitmq_global_messages_unroutable_returned_total)</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/pending</td>
    <td>rabbitmq_queue_messages_unacked</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/pending_acknowledgements</td>
    <td>rabbitmq_queue_messages_unacked</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/queues/count</td>
    <td>rabbitmq_queues</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/available</td>
    <td>rabbitmq_queue_messages_ready</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/channels/count</td>
    <td>rabbitmq_channels</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/messages/depth</td>
    <td>rabbitmq_queue_messages</td>
  </tr>
</tbody>
</table>

Some of the existing metrics from 1.x are only retrievable through the <code>/metrics/detailed</code> endpoint,
on RabbitMQ 3.9 servers. For more information on this endpoint, see the
[RabbitMQ documentation](https://github.com/rabbitmq/rabbitmq-server/tree/master/deps/rabbitmq_prometheus#selective-querying-of-per-object-metrics).

If you are using a Prometheus server and would like to scrape all of the same metrics as in 1.x,
make sure you are scraping the following endpoints on the RabbitMQ servers, then consult the metric mapping table below.
- <code>/metrics</code>
- <code>/metrics/detailed?family=vhost_status&family=exchange_names&family=queue_consumer_count&family=queue_coarse_metrics</code>

If you are using the Loggregator firehose system for collecting metrics, configure the product to gather these additional
metrics. How you do this depends on which service offering you are using:
- For the pre-provisioned offering, ensure the rabbitmq_prometheus plugin is enabled, configure [Detailed metrics query for Loggregator](./install-config-pp.html#detailed-metrics) in Ops Manager, then Apply Changes
- For the on-demand offering, pass the <code>detailed_metrics_query</code> parameter [when creating or updating a service instance](./use.html#detailed-metrics)
In each case, the value of the Detailed Metrics Query you will need to set is <code>?family=vhost_status&family=exchange_names&family=queue_consumer_count&family=queue_coarse_metrics</code>.

For the equivalent metrics for this endpoint:

<table>
<thead>
  <tr>
    <th>Old metric</th>
    <th>New metric</th>
    <th>Endpoint exposed on</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td>/p-rabbitmq/rabbitmq/vhosts/count</td>
    <td>count(rabbitmq_cluster_vhost_status)<br></td>
    <td>/metrics/detailed?family=vhost_status</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/exchanges/count</td>
    <td>count(rabbitmq_cluster_exchange_name)</td>
    <td>/metrics/detailed?family=exchange_names</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/exchange/&lt;VHOST_NAME&gt;/count</td>
    <td>count(rabbitmq_cluster_exchange_name, aggregate by vhost)</td>
    <td>/metrics/detailed?family=exchange_names</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/queues/&lt;VHOST_NAME&gt;/&lt;QUEUE_NAME&gt;/consumers</td>
    <td>rabbitmq_detailed_queue_consumers</td>
    <td>/metrics/detailed?family=queue_consumer_count</td>
  </tr>
  <tr>
    <td>/p-rabbitmq/rabbitmq/queues/&lt;VHOST_NAME&gt;/&lt;QUEUE_NAME&gt;/depth</td>
    <td>rabbitmq_detailed_queue_messages</td>
    <td>/metrics/detailed?family=queue_coarse_metrics</td>
  </tr>
</tbody>
</table>