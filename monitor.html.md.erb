---
title: Monitoring and KPIs for On-Demand RabbitMQ for PCF
owner: London Services
---

[//]: # (Keep changes to this page in sync with monitor-pp.html.md.erb - especially the #rabbit-mq metrics table)

This topic explains how to monitor the health of the on-demand version of the RabbitMQ for Pivotal Cloud Foundry (PCF) service using the logs,
metrics, and Key Performance Indicators (KPIs) generated by RabbitMQ for PCF component VMs.

On-Demand RabbitMQ for PCF components generate many of the same metrics as the pre-provisioned RabbitMQ service components.
For information about metrics for the pre-provisioned service,
see [Monitoring and KPIs for Preâ€‘Provisioned RabbitMQ for PCF](./monitor-pp.html).

[//]: # (, but with the prefix `p.rabbitmq` instead of `p-rabbitmq`.)

<p class="note"><strong>Note</strong>: On-Demand service metrics are prefixed with <code>p.rabbitmq</code> (with a dot), to distinguish them from the pre-provisioned service metrics.</p>

See [Logging and Metrics](http://docs.pivotal.io/pivotalcf/loggregator/index.html) for general information about logging and metrics in PCF.

## <a id="config"></a>Set up Syslog Forwarding and Metrics Polling Interval

As of RabbitMQ for PCF v1.9.0, syslog forwarding is preconfigured and set to on by default.
Pivotal recommends that you keep the default setting because it is good operational practice.
However, you can opt out by selecting **No** for **Do you want to configure syslog?** in the Ops Manager **Settings** tab.

To enable monitoring for RabbitMQ for PCF, operators designate an external syslog endpoint for RabbitMQ component log messages.
The endpoint serves as the input to a monitoring platform such as Datadog, Papertrail, or SumoLogic. </br>

To specify the destination for RabbitMQ for PCF log messages, do the following:

1. From the Ops Manager Installation Dashboard, click the RabbitMQ tile.
1. In the RabbitMQ tile, click the **Settings** tab. ![Ops Manager Syslog Forwarding Configuration](images/syslog-config-1.10.0.png)
1. Click **Syslog and Metrics**.
1. Configure the fields on the Syslog pane as follows:
<table class="nice">
    <th>Field</th>
    <th>Description</th>
    <tr>
        <td><strong>Metrics polling interval</strong></td>
        <td>The default setting is 30 seconds for all deployed components. Pivotal recommends that you do not change this interval.
        In order to avoid overwhelming components, do not set this below 10 seconds. Set this to -1 to disable Metrics.
        Changing this setting affects all deployed instances.</td>
    </tr>
    <tr>
        <td><strong>Syslog address</strong></td>
        <td>IP or DNS address of the syslog server</td>
    </tr>
    <tr>
        <td><strong>Syslog port</strong></td>
        <td>Port of the syslog server</td>
    </tr>
    <tr>
        <td><strong>Transport protocol</strong></td>
        <td>Transport protocol of the syslog server. One of `udp`, `tcp`, `relp`.</td>
    </tr>
    <tr>
        <td><strong>Enable TLS</strong></td>
        <td>Enable TLS to the syslog server.</td>
    </tr>
    <tr>
        <td><strong>Permitted Peer</strong></td>
        <td>If there are several peer servers that can respond to remote syslog connections,
            then you can provide a wildcard in the domain, such as `*.example.com`.</td>
    </tr>
    <tr>
        <td><strong>Custom CA Certificate</strong></td>
        <td>If the server certificate is not signed by a known authority, for example, an internal syslog server,
            provide the CA certificate of the log management service endpoint.</td>
    </tr>
</table>

1. Click **Save**.
1. Return to the Ops Manager Installation Dashboard.
1. If you are using Ops Manager v2.3 or later, click **Review Pending Changes**.
For more information about this Ops Manager page,
see [Reviewing Pending Product Changes](https://docs.pivotal.io/pivotalcf/customizing/review-pending-changes.html).
1. Click **Apply Changes** to redeploy with the changes.

###<a id="log-format"></a> Logging Format

With on-demand RabbitMQ for PCF logging configured, two types of components generate logs: the server nodes and the service broker:

* The logs for RabbitMQ server nodes follow the format <code>[job=rabbitmq-server-partition-GUID index=0]</code>
* The logs for the RabbitMQ service broker follow the format <code>[job=rabbitmq-broker-partition-GUID index=0]</code>

The RabbitMQ VMs log at the <code>info</code> level and capture errors, warnings, and informational messages.

<%= partial 'log-formats' %>

## <a id="metrics"></a>What Are Metrics

Metrics are regularly-generated log messages that report measured component states. The metrics polling interval defaults to 30 seconds.
The **metrics polling interval** is a configuration option on the RabbitMQ tile (**Settings** > **RabbitMQ**). Setting this interval to -1 disables metrics. The interval setting applies to all components deployed by the tile.

Metrics are long, single lines of text that follow the format:

```mac
origin:"p.rabbitmq" eventType:ValueMetric timestamp:1441188462382091652 deployment:"cf-rabbitmq" job:"cf-rabbitmq-node" index:"0" ip:"10.244.3.46" valueMetric: < name:"/p.rabbitmq/rabbitmq/system/memory" value:1024 unit:"MB">
```

The following sections describe the metrics used as Key Performance Indicators and other useful metrics for monitoring the RabbitMQ for PCF on-demand service.

## <a id="kpi"></a>Key Performance Indicators

Key Performance Indicators (KPIs) for RabbitMQ for PCF are metrics that operators find most useful for monitoring their RabbitMQ service to ensure smooth operation. KPIs are high-signal-value metrics that can indicate emerging issues. KPIs can be raw component metrics or _derived_ metrics generated by applying formulas to raw metrics.

Pivotal provides the following KPIs as general alerting and response guidance for typical RabbitMQ for PCF installations.
Pivotal recommends that operators continue to fine-tune the alert measures to their installation by observing historical trends.
Pivotal also recommends that operators expand beyond this guidance and create new, installation-specific monitoring
metrics, thresholds, and alerts based on learning from their own installations.

For a list of all RabbitMQ for PCF raw component metrics, see [Component Metrics Reference](#reference).

### <a id="heartbeats"></a>Component Heartbeats

Key RabbitMQ for PCF components periodically emit heartbeat metrics: the RabbitMQ server nodes, HAProxy nodes, and the Service Broker. The heartbeats are Boolean metrics, where <code>1</code> means the system is available, and <code>0</code> or the absence of a heartbeat metric means the service is not responding and should be investigated.

#### <a id="broker-heartbeat"></a> Service Broker Heartbeat

<table>
   <tr><th colspan="2" style="text-align: center;"><br> p.rabbitmq/service_broker/heartbeat<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RabbitMQ Service Broker <code>is alive</code> poll, which indicates if the component is available and able to respond to requests.<br><br>

      <strong>Use</strong>: If the Service Broker does not emit heartbeats, this indicates that it is offline. The Service Broker is required to create, update, and delete service instances, which are critical for dependent tiles such as Spring Cloud Services and Spring Cloud Data Flow.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
        Check the RabbitMQ Service Broker logs for errors. You can find this VM by targeting your RabbitMQ deployment with BOSH and running the command.
               <code>bosh -d service-instance_GUID vms</code>
      </td>
   </tr>
</table>

#### <a id="server-heartbeat"></a> Server Heartbeat

<table>
   <tr><th colspan="2" style="text-align: center;"><br> p.rabbitmq/rabbitmq/heartbeat<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RabbitMQ Server <code>is alive</code> poll, which indicates if the component is available and
          able to respond to requests.<br><br>

      <strong>Use</strong>: If the server does not emit heartbeats, this indicates that it is offline. To be functional, service instances require RabbitMQ Server.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: boolean<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 5 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: N/A<br>
      <strong>Red critical</strong>: &lt; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         Check the RabbitMQ Server logs for errors. You can find the VM by targeting your RabbitMQ deployment with BOSH and running the following command, which lists <code>rabbitmq</code>:
               <code>bosh -d service-instance_GUID vms</code>
            </li>
         </ul>
      </td>
   </tr>
</table>

### <a id="server-kpis"></a>RabbitMQ Server KPIs

The following KPIs from the RabbitMQ server component:

#### <a id="file-descriptors"></a> File Descriptors

<table>
   <tr><th colspan="2" style="text-align: center;"><br> p.rabbitmq/rabbitmq/system/file_descriptors<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>File descriptors consumed.<br><br>

      <strong>Use</strong>: If the number of file descriptors consumed becomes too large,
              the VM might lose the ability to perform disk I/O, which can cause data loss.
      <p class="note"><strong>Note</strong>: This assumes non-persistent messages are handled by retries or some other logic by the producers.</p>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 250000 <br>
      <strong>Red critical</strong>: &gt; 280000</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>The default <code>ulimit</code> for RabbitMQ for PCF is 300000. If this metric is met or exceeded for an extended period of time, consider reducing the load on the server.</td>
   </tr>
</table>

#### <a id="erlang-processes"></a> Erlang Processes

<table>
   <tr><th colspan="2" style="text-align: center;"><br> p.rabbitmq/rabbitmq/erlang/erlang_processes<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td><a href="https://www.erlang.org/docs">Erlang</a> processes consumed by RabbitMQ, which runs on an Erlang VM.<br><br>

      <strong>Use</strong>: This is the key indicator of the processing capability of a node.
      <br><br>
      <strong>Origin</strong>: Doppler/Firehose<br>
      <strong>Type</strong>: count<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 900000 <br>
      <strong>Red critical</strong>: &gt; 950000</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>The default Erlang process limit in RabbitMQ for PCF v1.6 and later is 1,048,816. If this metric meets or exceeds the recommended thresholds for extended periods of time, consider scaling the RabbitMQ nodes in the tile <b>Resource Config</b> pane.
      </td>
   </tr>
</table>

### <a id="bosh"></a> BOSH System Health Metrics

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial '../../rabbitmq-cf/odb/bosh_health_metrics_pcf2' %>

All BOSH-deployed components generate the system health metrics below.
These component metrics are from RabbitMQ for PCF components, and serve as KPIs for
the RabbitMQ for PCF service.

#### <a id="ram"></a> RAM

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.mem.percent <br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>RAM being consumed by the <code>p.rabbitmq</code> VM.<br><br>

      <strong>Use</strong>: RabbitMQ is considered to be in a good state when it has few or no messages.
              In other words, "an empty rabbit is a happy rabbit."
              Alerting on this metric can indicate that there are too few consumers or apps that read messages from the queue.
      <br><br>
      Healthmonitor reports when  RabbitMQ uses more than 40% of its RAM for the past ten minutes.
      <br><br>
      <strong>Origin</strong>:  BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 40 <br>
      <strong>Red critical</strong>: &gt; 50</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="cpu"></a> CPU

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.cpu.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>CPU being consumed by the <code>p.rabbitmq</code> VM.<br><br>

      <strong>Use</strong>: A node that experiences context switching or high CPU usage becomes unresponsive.
      This also affects the ability of the node to report metrics.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>:  BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td> Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="ephemeral-disk"></a> Ephemeral Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> system.disk.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Ephemeral Disk being consumed by the <code>p.rabbitmq</code> VM.<br><br>
      <strong>Use</strong>: If system disk fills up, there are too few consumers.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>:  BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

#### <a id="persistent-disk"></a> Persistent Disk

<table>
   <tr><th colspan="2" style="text-align: center;"><br> persistent.disk.percent<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Persistent Disk being consumed by the <code>p.rabbitmq</code> VM.<br><br>
      <strong>Use</strong>: If system disk fills up, there are too few consumers.
      <br><br>
      Healthmonitor reports when RabbitMQ uses more than 40% of its CPU for the past ten minutes.
      <br><br>
      <strong>Origin</strong>:  BOSH HM<br>
      <strong>Type</strong>: percent<br>
      <strong>Frequency</strong>: 30 s (default), 10 s (configurable minimum)<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over last 10 minutes</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &gt; 60 <br>
      <strong>Red critical</strong>: &gt; 75</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>Remember that "an empty rabbit is a happy rabbit". Add more consumers to drain the queue as fast as possible.
      </td>
   </tr>
</table>

## <a id="partition-indicator"></a>Determine If There Is a Network Partition

You can use the `reachable_nodes` metric to help to identify network partitions.
This metric shows how many nodes in the cluster each individual node is aware of. A good indication that a node might be in a partition is when it is aware of only itself.

Here is an example of this metrics:

```mac
origin:"p.rabbitmq" eventType:ValueMetric timestamp:1441188462382091652 deployment:"cf-rabbitmq" job:"cf-rabbitmq-node" index:"0" ip:"10.244.3.46" valueMetric: < name:"/p.rabbitmq/rabbitmq/erlang/reachable_nodes" value:3 unit:"count">
```

You can create monitors to emit alerts in case a cluster seems to be in a
partition. In a healthy cluster that is not undergoing upgrades, each node's `reachable_nodes` count is equal to the number of nodes in the cluster.

To monitor for network partition, Pivotal recommends alerting when one of the nodes starts reporting a `reachable_nodes` count that is less than the size of the cluster.

During rolling upgrades, nodes lose contact with other nodes. Therefore, only alert if a lowered `reachable_nodes` count persists longer than the expected upgrade time.


### <a id="recover"></a> Recover from a Network Partition

For information about how to recover from a network partition, see the [RabbitMQ documentation](https://www.rabbitmq.com/partitions.html).

## <a id="reference"></a>Component Metric Reference

RabbitMQ for PCF component VMs emit the following raw metrics. The full name of the metric follows the format: `/p.rabbitmq/COMPONENT/METRIC-NAME`

### <a id="rabbitmq-metrics"></a>RabbitMQ&nbsp; Server Metrics

RabbitMQ for PCF message server components emit the following metrics.

<table>
    <tr>
        <th>Full Name</th>
        <th>Unit</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/heartbeat</code></td>
        <td>boolean</td>
        <td>Indicates whether the RabbitMQ server is available and able to respond to requests</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/erlang/erlang_processes</code></td>
        <td>count</td>
        <td>The number of Erlang processes</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/erlang/reachable_nodes</code></td>
        <td>count</td>
        <td>The number of nodes the current node can reach</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/system/memory</code></td>
        <td>MB</td>
        <td>The memory in MB used by the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/system/mem_alarm</code></td>
        <td>boolean</td>
        <td>Indicates if the memory alarm went off</td>
    </tr>
    <tr>
       <td><code>/p.rabbitmq/rabbitmq/system/disk_free</code></td>
       <td>MB</td>
       <td>The disk space available on the node</td>
    </tr>
    <tr>
       <td><code>/p.rabbitmq/rabbitmq/system/disk_free_alarm</code></td>
       <td>boolean</td>
       <td>Indicates if the disk free alarm went off</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/connections/count</code></td>
        <td>count</td>
        <td>The total number of connections to the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/consumers/count</code></td>
        <td>count</td>
        <td>The total number of consumers registered in the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/delivered</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>deliver_get</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/delivered_noack</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>deliver_noack</code> on the node</td>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/delivered_rate</code></td>
        <td>rate</td>
        <td>The rate per second at which messages are being delivered to consumers or clients on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/published</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>publish</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/published_rate</code></td>
        <td>rate</td>
        <td>The rate per second at which messages are being published by the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/redelivered</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>redeliver</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/redelivered_rate</code></td>
        <td>rate</td>
        <td>The rate per second at which messages are getting the status <code>redeliver</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/get_no_ack</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>get_no_ack</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/get_no_ack_rate</code></td>
        <td>rate</td>
        <td>The rate per second at which messages get the status <code>get_no_ack</code> on the node</td>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/pending</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>messages_unacknowledged</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/depth</code></td>
        <td>count</td>
        <td>The number of messages with the status <code>messages_unacknowledged</code> or <code>messages_ready</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/system/file_descriptors</code></td>
        <td>count</td>
        <td>The number of open file descriptors on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/exchanges/count</code></td>
        <td>count</td>
        <td>The total number of exchanges on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/messages/available</code></td>
        <td>count</td>
        <td>The total number of messages with the status <code>messages_ready</code> on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/queues/count</code></td>
        <td>count</td>
        <td>The number of queues on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/channels/count</code></td>
        <td>count</td>
        <td>The number of channels on the node</td>
    </tr>
    <tr>
        <td><code>/p.rabbitmq/rabbitmq/vhosts/count</code></td>
        <td>count</td>
        <td>The number of vhosts</td>
    </tr>
</table>
